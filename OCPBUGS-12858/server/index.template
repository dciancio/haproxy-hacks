<!-- -*- mode: html -*- -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch URLs and Display Results</title>
    <style>
    body {
        background-color: rgba(255, 255, 255, 0.5);
    }

    /* Current styles */
    table {
	width: 100%;
	border-collapse: collapse;
    }
    th, td {
	border: 1px solid black;
	padding: 8px;
	text-align: left;
    }
    th {
	background-color: #f2f2f2;
    }
    /* New styles for alternating row colors */
    tbody tr:nth-child(odd) {
	background-color: #f9f9f9; /* This is a very light gray color */
    }
    tbody tr:nth-child(even) {
	background-color: #e6e6e6; /* This is a slightly darker gray than the odd rows */
    }
    </style>
</head>
<body>
    <h1>URL Results</h1>
    <table>
    <thead>
	<tr>
	<th>URL</th>
	<th>Response</th>
	<th>Time (ms)</th>
	</tr>
    </thead>
    <tbody id="results">
    </tbody>
    </table>
    <script>
    const urls = [
	'https://medicalrecords-' + 'NAMESPACE' + '.' + 'SUBDOMAIN' + '/test',
	'https://publicblog-' + 'NAMESPACE' + '.' + 'SUBDOMAIN' + '/test',
    ];

async function fetchUrl(url) {
    const options = {
	method: 'GET',
	mode: 'cors',
	cache: 'no-cache',
	redirect: 'follow',
	referrerPolicy: 'no-referrer',
    };

    const startMark = `start-${url}`;
    const endMark = `end-${url}`;

    performance.mark(startMark);
    const response = await fetch(url);
    if (!response.ok) {  // Check if the response is successful
	throw new Error(`Failed to fetch ${url}. Status: ${response.status}`);
    }
    performance.mark(endMark);

    const data = await response.text();

    performance.measure(`Fetching: ${url}`, startMark, endMark);
    const measure = performance.getEntriesByName(`Fetching: ${url}`)[0];
    return { data, duration: measure.duration };
}

async function fetchUrls() {
    const resultsElement = document.getElementById('results');
    for (let i = 0; i < 100; i++) {
	for (const url of urls) {
	    const { data, duration } = await fetchUrl(url);
	    const row = document.createElement('tr');
	    const urlCell = document.createElement('td');
	    const resultCell = document.createElement('td');
	    const timeCell = document.createElement('td');

	    const link = document.createElement('a');
	    link.href = url;  // set its href to the URL

	    // Transform the hostname
	    const transformedText = transformHostname(url);
	    link.textContent = transformedText.text;

	    if (transformedText.color) {
		urlCell.style.backgroundColor = transformedText.color;
	    }

	    if (transformedText.textColor) {
		urlCell.style.color = transformedText.textColor;
	    }

	    urlCell.appendChild(link);  // append the <a> element to the URL cell

	    resultCell.textContent = data;
	    timeCell.textContent = duration ? duration.toFixed(2) + ' ms' : 'Error';

	    row.appendChild(urlCell);
	    row.appendChild(resultCell);
	    row.appendChild(timeCell);

	    resultsElement.appendChild(row);
	}
    }
}

// Helper function to transform the hostname
function transformHostname(url) {
    const urlObj = new URL(url);
    const subdomain = urlObj.hostname.split('.')[0];

    if (subdomain.startsWith('medicalrecords')) {
	return {
	    text: "MEDICAL RECORDS",
	    // color: "red",
	    // textColor: "black"
	};
    }
    else if (subdomain.startsWith('publicblog')) {
	return {
	    text: "public blog",
	    color: "green",
	    // textColor: "black"
	};
    }
    return {
	text: subdomain  // default case, just return the subdomain as is
    };
}

    fetchUrls();
    </script>
</body>
</html>
