#!/usr/bin/env bash

set -eu

this_script_dir=$(cd "$(dirname "$0")" && pwd)
export PATH="$this_script_dir:$PATH"

: "${ROUTER_CERT_NAME:=router-certs-default}"

project="$(oc project -q)"

if [[ "$project" != "ocpbugs12858" ]]; then
    echo "Expecting current namespace to \"ocpbugs12858\"."
    exit 1
fi

domain=$(oc get -n openshift-ingress-operator ingresscontroller/default -o yaml | yq .status.domain)

if [[ -z "$domain" ]]; then
    echo "ingresscontroller/default has no domain set."
    exit 1
fi

# Find the first router pod in the openshift-ingress namespace.
pod=$(oc get pods -n openshift-ingress -l ingresscontroller.operator.openshift.io/deployment-ingresscontroller=default -o jsonpath='{.items[0].metadata.name}')

if [[ -z "$pod" ]]; then
    echo "No router pod found in the openshift-ingress namespace."
    exit 1
fi

# Default certificate directories for the respective test routes.
medicalrecords_certdir="$PWD/certs/medicalrecords-${project}.${domain}"
publicblog_certdir="$PWD/certs/publicblog-${project}.${domain}"

use_ingress_wildcard_cert_for_each_route=0
set_destination_certificate_only=0

ingress_cert_tempdir=$(mktemp -d)

trap 'rm -rf -- "$ingress_cert_tempdir"' EXIT INT TERM HUP QUIT

process_route() {
    local cert_dir="$1"
    local route_yaml="$2"
    local dest_cacrt=""
    local tls_key=""
    local tls_crt=""

    if [[ "$set_destination_certificate_only" -eq 1 ]]; then
	dest_cacrt="$(oc exec -n openshift-ingress -c router "$pod" -- cat /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt)"
    else
        tls_key="$(cat "$cert_dir/tls.key")"
        tls_crt="$(cat "$cert_dir/tls.crt")"
    fi

    oc process TLS_KEY="$tls_key" TLS_CRT="$tls_crt" DEST_CACRT="$dest_cacrt" -f "$route_yaml" -o yaml | oc apply -f -
}

PARAMS=""
while (( "$#" )); do
    case "$1" in
	--medicalrecords-certdir)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		medicalrecords_certdir=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	--publicblog-certdir)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		publicblog_certdir=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	--use-ingress-wildcard-certificate-for-each-route)
	    use_ingress_wildcard_cert_for_each_route=1
	    shift
	    ;;
	--set-destination-certificate-only)
	    set_destination_certificate_only=1
	    shift
	    ;;
	--*)
	    echo "Error: Unsupported flag $1" >&2
	    exit 1
	    ;;
	-*)
	    echo "Error: Unsupported flag $1" >&2
	    exit 1
	    ;;
	*) # preserve positional arguments
	    PARAMS="$PARAMS $1"
	    shift
	    ;;
    esac
done

# reset positional arguments
eval set -- "$PARAMS"

if [ "$use_ingress_wildcard_cert_for_each_route" -eq 1 ] && [ "$set_destination_certificate_only" -eq 1 ]; then
    echo "Error: The flags --use-ingress-wildcard-certificate-for-each-route and --set-destination-certificate-only are mutually exclusive." >&2
    exit 1
fi

oc delete --all routes
oc delete --all services
oc delete --all deployments

make -C server

pushd browser-test
oc apply -f deployment.yaml
oc apply -f service.yaml
oc apply -f routes.yaml
popd

if [[ $use_ingress_wildcard_cert_for_each_route -eq 1 ]]; then
    echo "Extracting secrets from $ROUTER_CERT_NAME"
    oc extract "secret/$ROUTER_CERT_NAME" -n openshift-ingress --keys=tls.crt --to=- > "$ingress_cert_tempdir/tls.crt"
    oc extract "secret/$ROUTER_CERT_NAME" -n openshift-ingress --keys=tls.key --to=- > "$ingress_cert_tempdir/tls.key"
    medicalrecords_certdir="$ingress_cert_tempdir"
    publicblog_certdir="$ingress_cert_tempdir"
    ls -lR "$ingress_cert_tempdir"
fi

pushd ocpbugs12858-test
oc apply -f service.yaml
oc apply -f deployment.yaml

echo -n "medicalrecords CN: "
openssl x509 -in "$medicalrecords_certdir/tls.crt" -noout -subject | awk -F= '/CN/ {print $NF}'

echo -n "publicblog_certdir CN: "
openssl x509 -in "$publicblog_certdir/tls.crt" -noout -subject | awk -F= '/CN/ {print $NF}'

process_route "$medicalrecords_certdir" "./medicalrecords-route.yaml"
process_route "$publicblog_certdir" "./publicblog-route.yaml"

popd

oc rollout status "deployment/${project}-test"
oc get all
