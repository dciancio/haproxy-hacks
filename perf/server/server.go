package main

import (
	"log"
	"net/http"
	"os"
)

const (
	defaultHTTPPort  = "8080"
	defaultHTTPSPort = "8443"
	defaultTLSCrt    = "/tls.crt"
	defaultTLSKey    = "/tls.key"
)

func lookupEnv(key, defaultVal string) string {
	if val, ok := os.LookupEnv(key); ok {
		return val
	}
	return defaultVal
}

const b1024_html = `<!DOCTYPE html>
<html>
<head>
<title>Welcome 1024B</title>
</head>
<body>
<h1>Welcome 1024B</h1>

<pre>
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
1234567891123456789212345678931234567894123456789512345678961234567897123456789812345678991234567890123456789112345678921234567
</pre>

</body>
</html>
`

func main() {
	log.SetFlags(log.LstdFlags | log.Lmicroseconds)

	http.HandleFunc("/1024.html", func(w http.ResponseWriter, r *http.Request) {
		if _, err := w.Write([]byte(b1024_html)); err != nil {
			log.Println(err)
		}
	})

	go func() {
		port := lookupEnv("HTTP_PORT", defaultHTTPPort)
		if err := http.ListenAndServe(":"+port, nil); err != nil {
			log.Fatal(err)
		}
	}()

	go func() {
		crtFile := lookupEnv("TLS_CRT", defaultTLSCrt)
		keyFile := lookupEnv("TLS_KEY", defaultTLSKey)
		port := lookupEnv("HTTPS_PORT", defaultHTTPSPort)
		if err := http.ListenAndServeTLS(":"+port, crtFile, keyFile, nil); err != nil {
			log.Fatal(err)
		}
	}()

	select {}
}
